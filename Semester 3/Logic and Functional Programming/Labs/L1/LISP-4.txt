;d)Build a list which contains positions of a minimum numeric element from a given linear list.

;minimum(a, b)
;=nil, if a is not a number and b is not a number
;=a, if b is not a number
;=b, if a is not a number
;=a, if a<b
;=b, if b<=a

(defun minimum(a b)
(cond
    ((and (not(numberp a)) (not(numberp b))) nil)
    ((not (numberp b)) a)
    ((not (numberp a)) b)
    ((< a b) a)
    (t b)
)
)

;minimumInList(l1 l2 ... ln)
;= l1, if n = 1
;minimum(l1, minimumInList(l2 ... ln))

(defun minimumInList(L)
(cond
    ((and (null (cdr L)) (atom (car L))) (car L))
    (t (minimum (car L) (minimumInList(cdr L))))
)
)

;listOfMinims(l1 l2 ... ln, min, pos)
;nil, if n = 0
;=pos U (listOfMinims (l2 ... ln, min pos+1)), if l1=min
; listOfMinims (l2 ... ln, min pos+1), otherwsie

(defun listOfMinims(L min pos)
(cond
    ((null L) nil)
    ((equal (car L) min) (cons pos (listOfMinims(cdr L) min (+ 1 pos))))
    (t (listOfMinims(cdr L) min (+ 1 pos)))
)
)

;(1 4 5) (listOfMinims '(4 1 2 4 1 1) (minimumInList '(4 1 2 4 1 3)) 0))    


(write (listOfMinims '(4 1 2 4 1 1) (minimumInList '(4 1 2 4 1 3)) 0))



