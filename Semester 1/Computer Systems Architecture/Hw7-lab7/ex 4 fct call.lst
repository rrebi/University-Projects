     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf,scanf                ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  
    14                                  ; Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate their product and display the result in the following format: "<a> * <b> = <result>". Example: "2 * 4 = 8"
    15                                  ;The values will be displayed in decimal format (base 10) with sign.
    16                                      
    17                                  segment data use32 class=data
    18 00000000 00000000                    a dd 0
    19 00000004 00000000                    b dd 0
    20 00000008 61203D2000                  format_a db "a = ", 0
    21 0000000D 62203D2000                  format_b db "b = ", 0
    22 00000012 256400                      format_s db "%d", 0
    23 00000015 52656164206E756D62-         format_r db "Read numbers are: %d and %d ",10,13,0
    23 0000001E 657273206172653A20-
    23 00000027 256420616E64202564-
    23 00000030 200A0D00           
    24 00000034 2564202A202564203D-         format db "%d * %d = %d", 0     ; %d <=> decimal number
    24 0000003D 20256400           
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; printf (format_a)
    30 00000000 68[08000000]                    push dword format_a
    31 00000005 FF15[00000000]                  call [printf]
    32 0000000B 83C404                          add esp, 4*1 ;changing the stack pointer (empty the stack) 
    33                                          
    34                                          
    35                                          ; scanf(format_2, a) 
    36 0000000E 68[00000000]                    push dword a 
    37 00000013 68[12000000]                    push dword format_s 
    38 00000018 FF15[00000000]                  call [scanf]
    39 0000001E 83C408                          add esp, 4*2
    40                                          
    41                                          ; printf (format_b) 
    42 00000021 68[0D000000]                    push dword format_b
    43 00000026 FF15[00000000]                  call [printf]
    44 0000002C 83C404                          add esp, 4*1 ; 
    45                                          
    46                                          ; scanf(format_2, b) 
    47 0000002F 68[04000000]                    push dword b 
    48 00000034 68[12000000]                    push dword format_s 
    49 00000039 FF15[00000000]                  call [scanf]
    50 0000003F 83C408                          add esp, 4*2
    51                                              
    52                                          ; printf (format, a, b)  which numbers are read from the keyboard
    53 00000042 FF35[04000000]                  push dword [b]
    54 00000048 FF35[00000000]                  push dword [a]
    55 0000004E 68[15000000]                    push dword format_r
    56 00000053 FF15[00000000]                  call [printf]
    57 00000059 83C40C                          add esp, 4*3 ; clear stack 
    58                                          
    59                                          
    60                                          ; a*b  
    61 0000005C 8B1D[00000000]                  mov ebx, dword[a]
    62 00000062 0FAF1D[04000000]                imul ebx, dword[b] ; ebx = a*b  
    63                                          
    64                                          ; printf (format, a, b, EBX)
    65 00000069 53                              push ebx 
    66 0000006A FF35[04000000]                  push dword [b]
    67 00000070 FF35[00000000]                  push dword [a]
    68 00000076 68[34000000]                    push dword format
    69 0000007B FF15[00000000]                  call [printf]
    70 00000081 83C410                          add esp, 4*4 ; clear stack 
    71                                          
    72                                      
    73                                          ; exit(0)
    74 00000084 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000086 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
