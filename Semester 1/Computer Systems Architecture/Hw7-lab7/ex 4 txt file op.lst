     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen, fclose, fread, printf, fprintf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  
    17                                  
    18                                  ; 4. A text file is given. Read the content of the file, count the number of odd digits and display the result on the screen. The name of text file is defined in the data segment.
    19                                  segment data use32 class=data
    20                                      
    21 00000000 6F64642E74787400            file_name db "odd.txt", 0
    22 00000008 7200                        acces_mode db "r", 0
    23 0000000A FFFFFFFF                    file_descriptor dd -1
    24 0000000E 5468652066696C6520-         format_file db "The file contains: ", 10, 13, 0
    24 00000017 636F6E7461696E733A-
    24 00000020 200A0D00           
    25 00000024 257300                      format_s db "%s",0
    26 00000027 200A0D00                    format_endl db " ", 10, 13, 0   ; \n
    27 0000002B 00<rept>                    text times 100 db 0 ; reserve 100 bytes for the destination string and initialize it
    28 0000008F 4F6464206469676974-         format db "Odd digits found: %d", 10, 13, 0
    28 00000098 7320666F756E643A20-
    28 000000A1 25640A0D00         
    29 000000A6 3133353739                  odd db '1','3','5','7','9'
    30                                      len_odd equ $-odd   ;the length of the string odd
    31                                      
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                          ; fopen(file_name, acces_mode) (the file read)
    37 00000000 68[08000000]                    push dword acces_mode   ; r
    38 00000005 68[00000000]                    push dword file_name    ; odd.txt
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add esp, 4*2   ;changing the stack pointer (empty the stack)
    41                                          
    42 00000013 A3[0A000000]                    mov [file_descriptor], eax  ; store the file descriptor returned by fopen
    43                                          
    44 00000018 83F800                          cmp eax, 0 ; checking whether the file was open corectly
    45 0000001B 0F8490000000                    je endl    ; jump if not to the end of the loop
    46                                          
    47                                              ; printf(format_file)  
    48 00000021 68[0E000000]                        push dword format_file  ; the file contains..
    49 00000026 FF15[00000000]                      call [printf]
    50 0000002C 83C404                              add esp, 4*1
    51                                                 
    52 0000002F BD00000000                          mov ebp, 0 ; = counts odd numbers
    53                                              repeat_:
    54 00000034 60                                      pushad  ; save the register
    55                                                  
    56                                                  ; fread(text, 1, len, file_descriptor)
    57 00000035 FF35[0A000000]                          push dword [file_descriptor]
    58 0000003B 6A01                                    push dword 1    
    59 0000003D 6A01                                    push dword 1   
    60 0000003F 68[2B000000]                            push dword text 
    61 00000044 FF15[00000000]                          call [fread]
    62 0000004A 83C410                                  add esp, 4*4
    63                                                  
    64 0000004D 83F800                                  cmp eax, 0
    65 00000050 7433                                    je empty_file
    66                                                   
    67                                                      ; printf(format_s, text ) prints everyth from the file
    68 00000052 68[2B000000]                                push dword text
    69 00000057 68[24000000]                                push dword format_s ;%s
    70 0000005C FF15[00000000]                              call [printf]
    71 00000062 83C408                                      add esp, 4*2  
    72                                                      
    73 00000065 61                                          popad   ; pop the register saved
    74                                                     
    75 00000066 8B1D[2B000000]                              mov ebx, [text]            
    76 0000006C B905000000                                  mov ecx, len_odd
    77 00000071 BE[A6000000]                                mov esi, odd
    78 00000076 B800000000                                  mov eax, 0  ; result in eax = a character -> clear
    79                                                      while_len:    ; ecx != 0
    80 0000007B AC                                              lodsb; al=[esi] + inc esi  
    81 0000007C 38D8                                            cmp al, bl
    82 0000007E 7501                                            jne not_odd ; jump if it is not equal (not odd or not a digit)
    83 00000080 45                                                  inc ebp
    84                                                          not_odd:
    85                                                          
    86 00000081 E2F8                                        loop while_len
    87                                                      
    88 00000083 EBAF                                jmp repeat_
    89                                              empty_file:
    90                                             
    91                                              ; printf(format_endl)  - new line \n
    92 00000085 68[27000000]                        push dword format_endl 
    93 0000008A FF15[00000000]                      call [printf]
    94 00000090 83C404                              add esp, 4*1
    95                                             
    96                                              ; printf(format, value) - ebp = final number (odd digits) 
    97 00000093 55                                  push dword ebp
    98 00000094 68[8F000000]                        push dword format   ; odd digits found..
    99 00000099 FF15[00000000]                      call [printf]
   100 0000009F 83C408                              add esp, 4*2
   101                                             
   102                                              
   103                                              ; fclose(file_descriptor)
   104 000000A2 FF35[0A000000]                      push dword [file_descriptor]
   105 000000A8 FF15[00000000]                      call [fclose]
   106 000000AE 83C404                              add esp, 4*1
   107                                          
   108                                          endl:
   109                                      
   110                                          ; exit(0)
   111 000000B1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   112 000000B3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
