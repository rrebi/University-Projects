     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; 14. Se citesc mai multe numere de la tastatura, in baza 2. Sa se afiseze aceste numere in baza 8.
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  extern conversie
     9                                  
    10                                  ; declare external functions needed by our program
    11                                  extern exit, scanf, printf              
    12                                  import exit msvcrt.dll 
    13                                  import scanf msvcrt.dll
    14                                  import printf msvcrt.dll  
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00<rept>                    x times 30 db 0
    19 0000001E 00<rept>                	y times 10 db 0
    20 00000028 257300                  	format db "%s", 0
    21 0000002B 6E3D00                  	msg1 db "n=", 0
    22 0000002E 4E722E20696E206261-     	msg2 db "Nr. in baza 2:", 0
    22 00000037 7A6120323A00       
    23 0000003D 4E722E20696E206261-     	msg3 db "Nr. in baza 8:%s", 13, 10, 0
    23 00000046 7A6120383A25730D0A-
    23 0000004F 00                 
    24                                  	
    25 00000050 00000000                	nr dd 0
    26 00000054 256400                  	format_nr db "%d", 0	
    27                                  	
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                  
    31                                      start:
    32                                  		; printf(msg1)
    33 00000000 68[2B000000]            		push dword msg1
    34 00000005 FF15[00000000]          		call [printf]
    35 0000000B 83C404                  		add esp, 4*1
    36                                  		
    37                                  		; scanf(format_nr,nr)
    38 0000000E 68[50000000]            		push dword nr
    39 00000013 68[54000000]            		push dword format_nr
    40 00000018 FF15[00000000]          		call [scanf]
    41 0000001E 83C408                  		add esp, 4*2
    42                                  		
    43 00000021 8B0D[50000000]          		mov ecx, [nr]
    44 00000027 E347                    		jecxz final
    45                                  		
    46                                  		
    47                                  		
    48                                  	repeta:
    49 00000029 60                      		pushad
    50                                  		; printf(msg2)
    51 0000002A 68[2E000000]            		push dword msg2
    52 0000002F FF15[00000000]          		call [printf]
    53 00000035 83C404                  		add esp, 4*1
    54                                  
    55                                  		
    56                                  		; scanf(format, x)
    57 00000038 68[00000000]            		push dword x
    58 0000003D 68[28000000]            		push dword format
    59 00000042 FF15[00000000]          		call [scanf]
    60 00000048 83C408                  		add esp, 4*2
    61                                  
    62 0000004B 68[1E000000]            		push dword y		
    63 00000050 68[00000000]            		push dword x
    64 00000055 E8(00000000)            		call conversie
    65                                  		
    66                                  		; printf(msg3, y)
    67 0000005A 68[1E000000]            		push dword y
    68 0000005F 68[3D000000]            		push dword msg3
    69 00000064 FF15[00000000]          		call [printf]
    70 0000006A 83C408                  		add esp, 4*2
    71 0000006D 61                      		popad
    72                                  		
    73 0000006E E2B9                    		loop repeta
    74                                  	final:
    75 00000070 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000072 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
