     1                                  ; Given the byte A, obtain the integer number n represented on the bits 2-4 of A. Then obtain the byte B by rotating A n positions to the right. Compute the doubleword C as follows:
     2                                  ; the bits 8-15 of C have the value 0
     3                                  ; the bits 16-23 of C are the same as the bits of B
     4                                  ; the bits 24-31 of C are the same as the bits of A
     5                                  ; the bits 0-7 of C have the value 1
     6                                  
     7                                  ; Observation: bits are numbered from right to left
     8                                  
     9                                  bits 32 ;assembling for the 32 bits architecture
    10                                  ; the start label will be the entry point in the program
    11                                  global  start 
    12                                  
    13                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    14                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    15                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    16                                  segment  data use32 class=data ; the data segment where the variables are declared 
    17 00000000 6B                           a db 01101011b
    18 00000001 00                           b db 0 ; 11011010
    19 00000002 00000000                     c dd 0 ;   00000000 11111111
    20                                  segment  code use32 class=code ; code segment
    21                                  start: 
    22                                  
    23 00000000 BB00000000                  mov  ebx, 0 ; we compute the result in bx
    24                                      
    25                                      
    26                                      ;finding n
    27 00000005 8A15[00000000]              mov dl, [a]
    28 0000000B 80E21C                      and dl, 00011100b ; dl = the integer number n represented on the bits 2-4 ; isolating the bits 2-4
    29 0000000E B102                        mov cl, 2
    30 00000010 D2CA                        ror dl, cl ; rotating to right the bits 0 and 1
    31                                      
    32                                      
    33                                      ; obtaining b
    34 00000012 A0[00000000]                mov al, [a] ; al = 01101011b
    35 00000017 88D1                        mov cl, dl ; mov in cl, dl = n (n=2)
    36 00000019 D2C8                        ror al, cl ; 11011010b ; we rotate n positions to the right
    37 0000001B A2[01000000]                mov [b], al ; b = 11011010b
    38                                  
    39                                      
    40                                      ; the bits 0-7 of C have the value 1
    41                                      ; the bits 8-15 of C have the value 0
    42 00000020 BBFF000000                  mov ebx, 00000000000000000000000011111111b
    43                                      
    44                                      
    45                                      ; the bits 16-23 of C are the same as the bits of B
    46 00000025 B800000000                  mov eax, 0 
    47 0000002A 66A1[01000000]              mov ax, [b] ; ax = 11011010
    48 00000030 B110                        mov cl, 16  
    49 00000032 D3E0                        shl eax, cl ; the bits are shifted to the left
    50 00000034 09C3                        or ebx, eax ; ebx = 11011010 00000000 11111111 ;
    51                                      
    52                                      
    53                                      ; the bits 24-31 of C are the same as the bits of A 
    54 00000036 B800000000                  mov eax, 0 
    55 0000003B 66A1[00000000]              mov ax, [a] ; ax = 01101011
    56 00000041 B118                        mov cl, 24 
    57 00000043 D3E0                        shl eax, cl ; the bits are shifted to the left 
    58 00000045 09C3                        or ebx, eax ; storing eax in ebx = 01101011 11011010 00000000 11111111 ;6BDA00FF
    59                                      
    60                                      
    61 00000047 891D[02000000]              mov  [c], ebx ; we move the result from the register to the result variable
    62                                  
    63 0000004D 6A00                        push dword 0 ;saves on stack the parameter of the function exit
    64 0000004F FF15[00000000]              call [exit] ;function exit is called in order to end the execution of the program	
