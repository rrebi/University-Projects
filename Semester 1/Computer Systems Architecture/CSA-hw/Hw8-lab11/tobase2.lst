     1                                  bits 32 
     2                                  global start
     3                                  extern exit ;tell nasm that exit exists even if we won't be defining it
     4                                  import exit msvcrt.dll  ;exit is a function that ends the calling process. It is defined in msvcrt.dll
     5                                  
     6                                  ; our data is declared here (the variables needed by our program)
     7                                  segment data use32 class=data
     8 00000000 0519377F                	s db 5, 25, 55, 127
     9                                  	len equ $-s ;the length of the string 
    10 00000004 00<rept>                    d times len db 0
    11 00000008 02                      	doi db 2   ;variabile used for determining the digits in base 2 of a number by successive divisions to 2
    12 00000009 00                      	suma db 0   ;variabile used for holding the sum of the digits 
    13                                  
    14                                      
    15                                  ; our code starts here
    16                                  segment code use32 class=code
    17                                      
    18                                      ;A byte string s is given. Build the byte string d such that every byte d[i] is equal to the count of ones in the corresponding byte s[i] of s
    19                                      
    20                                      start:
    21 00000000 FC                          cld ;df=0
    22 00000001 B904000000              	mov ecx, len    ;we will parse the elements of the string in a loop with len iterations.
    23 00000006 BE[00000000]                mov esi, s      ;s: 5, 25, 55, 127
    24 0000000B BF[04000000]                mov edi, d      ;d: 0
    25                                      
    26                                  	;we obtain the 2-nd base digits of the number bl by successive divisions to 2 and then compute the sum of these digits
    27                                      ;101, 11001, 110111, 1111111
    28                                      ;d: 2, 3, 5, 7
    29                                      
    30 00000010 E326                    	jecxz end_loop
    31                                      do:
    32 00000012 B300                            mov bl, 0
    33 00000014 AC                              lodsb  ;al=[esi] + inc esi
    34                                          ; mov byte[suma], 0   ;suma = 0
    35                                          ; mov byte [suma], 0
    36                                          transf:
    37 00000015 B400                                mov ah, 0       ;converting al -> ax
    38 00000017 88C2                                mov dl, al
    39 00000019 F635[08000000]                      div byte[doi]   
    40                                              ; add [suma], ah  ;suma += ah(=quotient of s[esi] (s[esi]%2))
    41                                              ;mov cl, 1
    42                                              ;shr ah, cl
    43 0000001F 00E3                                add bl, ah
    44 00000021 B000                                mov al, 0
    45 00000023 88D8                                mov al, bl
    46 00000025 B30A                                mov bl, 10
    47 00000027 F6E3                                mul bl
    48 00000029 88C3                                mov bl, al
    49                                              
    50 0000002B 88D0                                mov al, dl
    51                                              ;stosb
    52                                              ;dec edi
    53 0000002D 3C00                                cmp al, 0       ;if s[esi] = 0: next number
    54 0000002F 7402                                jz sf
    55 00000031 EBE2                            jmp transf
    56                                          sf:
    57 00000033 88D8                            mov al, bl
    58                                          ; mov al, byte[suma]
    59 00000035 AA                              stosb   ;d[edi] = al + inc edi
    60 00000036 E2DA                        loop do
    61                                      end_loop:
    62                                      
    63 00000038 6A00                        push dword 0; push the parameter for exit onto the stack
    64 0000003A FF15[00000000]              call [exit]; call exit to terminate the program
    65                                          
