     1                                  ;Two byte strings S1 and S2 are given, having the same length. Obtain the string D in the following way: each element found on the even positions of D is the sum of the corresponding elements from S1 and S2, and eac
     2                                  bits 32 
     3                                  global start        
     4                                  extern exit ;printf ; tell nasm that exit exists even if we won't be defining it
     5                                  import exit msvcrt.dll ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     6                                  ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     7                                  ; our data is declared here (the variables needed by our program)
     8                                  segment data use32 class=data
     9 00000000 01020304                	s1 db 1, 2, 3, 4   ; declare the string of bytes	
    10                                      len equ $-s1      ; compute the length of the strings in l (they have the same length)
    11 00000004 05060708                    s2 db 5, 6, 7, 8   ; declare the string of bytes
    12                                  
    13 00000008 00<rept>                	d times len db 0  ; reserve l bytes for the destination string and initialize it
    14                                  segment code use32 class=code
    15                                  start:
    16 00000000 B903000000              	mov ecx, len/2+1  ; we put the length len in ecx in order to make the loop
    17 00000005 BE00000000              	mov esi, 0  ; gonna increment it at the end to get the next position   
    18 0000000A E318                    	jecxz even_loop    ; loop for the even positions
    19                                  	do:
    20                                          
    21 0000000C 8A86[00000000]                  mov al, [s1+esi]    ; we move in al the element from s1
    22 00000012 8A9E[04000000]                  mov bl, [s2+esi]    ; we move in bl the element from s2
    23                                          
    24 00000018 00D8                            add al, bl  ; al = al + bl
    25                                          
    26 0000001A 8886[08000000]          		mov [d+esi], al  ; we move in d the element from al (with the position esi) 
    27                                          
    28 00000020 46                      		inc esi    ; esi ++
    29 00000021 46                              inc esi    ; esi ++
    30 00000022 E2E8                    	loop do
    31                                  	even_loop:   ;end of the program
    32                                      
    33 00000024 B903000000                  mov ecx, len/2+1  ; we put the length len in ecx in order to make the loop
    34 00000029 BE01000000                  mov esi, 1  ; gonna increment it at the end to get the next position
    35 0000002E E318                        jecxz odd_loop     ; loop for odd positions
    36                                  	do1:
    37                                          
    38 00000030 8A86[00000000]                  mov al, [s1+esi]    ; we move in al the element from s1
    39 00000036 8A9E[04000000]                  mov bl, [s2+esi]    ; we move in bl the element from s2
    40                                          
    41 0000003C 28D8                            sub al, bl  ; al = al - bl
    42                                          
    43 0000003E 8886[08000000]          		mov [d+esi], al   ; we move in d the element from al (with the position esi) 
    44                                          
    45 00000044 46                      		inc esi    ; esi ++
    46 00000045 46                              inc esi    ; esi ++
    47 00000046 E2E8                    	loop do1
    48                                  	odd_loop:   ;end of the program
    49                                  
    50                                      
    51                                  	; exit(0)
    52 00000048 6A00                    	push dword 0 ; push the parameter for exit onto the stack
    53 0000004A FF15[00000000]          	call [exit] ; call exit to terminate the program
