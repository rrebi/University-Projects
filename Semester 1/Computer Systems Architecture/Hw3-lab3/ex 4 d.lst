     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; b,c,d - byte; a - word; e - double word; x - qword; - Signed representation
     3                                  ; (a * 2 + b / 2 + e) / (c - d) + x / a
     4                                  ; ex: a = 3; b = 4; c = 10; d = 6; e = 8 => (6 + 2 + 8) / 4 + 9 / 3 = 4 + 3 = 7
     5                                  bits 32 ;assembling for the 32 bits architecture
     6                                  ; the start label will be the entry point in the program
     7                                  global  start 
     8                                  
     9                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    10                                  
    11                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    12                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    13                                  segment  data use32 class=data ; the data segment where the variables are declared 
    14 00000000 0300                    	a dw 3
    15 00000002 04                          b db 4
    16 00000003 0A                          c db 10
    17 00000004 06                          d db 6
    18 00000005 08000000                    e dd 8
    19 00000009 0900000000000000            x dq 9
    20                                      
    21                                  segment  code use32 class=code ; code segment
    22                                  start:
    23                                      ;(a*2 + b/2 + e) / (c-d) + x/a  ; b,c,d - byte; a - word; e - double word; x - qword
    24                                      
    25 00000000 66A1[00000000]              mov ax, [a] ;ax = a
    26 00000006 66BA0200                    mov dx, 2 ;dx = 2
    27 0000000A 66F7EA                      imul dx ;dx:ax = ax * dx = a*2
    28                                      
    29 0000000D 6689C3                      mov bx, ax ;bx = ax = a*2
    30 00000010 6689D1                      mov cx, dx ;cx=dx
    31                                      
    32 00000013 A0[02000000]                mov al, [b] ;al = b
    33 00000018 6698                        cbw ;converting al to ax
    34 0000001A B202                        mov dl, 2 ;dl = 2
    35 0000001C F6FA                        idiv dl ;al = ax/dl = b/2
    36 0000001E 6698                        cbw ;converting al to ax
    37 00000020 6699                        cwd ;converting ax to dx:ax 
    38                                      
    39                                      
    40                                      ;clc ;clear carry flag
    41 00000022 6601D8                      add ax, bx
    42 00000025 6611CA                      adc dx, cx ;ax = ax + bx + cf = a*2 + b/2
    43                                      
    44 00000028 6652                        push dx
    45 0000002A 6650                        push ax
    46 0000002C 5B                          pop ebx
    47                                      
    48 0000002D A1[05000000]                mov eax, [e] ;eax = e
    49 00000032 01C3                        add ebx, eax ; ebx = ebx + eax = a*2 + b/2 + e
    50                                      
    51                                      
    52                                      
    53 00000034 A0[03000000]                mov al, [c] ;al = c
    54 00000039 2A05[04000000]              sub al, [d] ;al = c - d
    55 0000003F 6698                        cbw ;converting al to ax
    56 00000041 6699                        cwd ;converting ax to dx:ax 
    57                                      
    58 00000043 6652                        push dx
    59 00000045 6650                        push ax
    60                                      
    61 00000047 89D8                        mov eax, ebx ;eax = ebx = a*2 + b/2 + e
    62 00000049 99                          cdq ;converting eax to edx:eax
    63                                      
    64 0000004A 5B                          pop ebx
    65 0000004B F7FB                        idiv ebx ;eax = edx:eax / ebx, edc = edx:eax % ebx ;eax=(s*2+b/2+e)/(c-d)
    66                                      
    67 0000004D 89C3                        mov ebx, eax ;ebx = eax = (s*2+b/2+e)/(c-d)
    68                                      ;mov ecx, edx
    69                                      
    70 0000004F B800000000                  mov eax, 0
    71 00000054 66A1[00000000]              mov ax, [a] ;ax = a
    72 0000005A 6699                        cwd ;converting ax to dx:ax
    73                                      ;cdq ;converting eax to edx:eax
    74                                      
    75 0000005C 6652                        push dx
    76 0000005E 6650                        push ax
    77                                      
    78 00000060 A1[09000000]                mov eax, dword [x] 
    79 00000065 8B15[0D000000]              mov edx, dword [x+4] ;edx:eax = x
    80                                      
    81 0000006B 5C                          pop esp
    82                                      
    83 0000006C F7FC                        idiv esp ;eax = edx:eax / esp, edc = edx:eax % esp ;eax=x/a
    84                                      
    85 0000006E F8                          clc ;clear carry flag
    86 0000006F 01C3                        add ebx, eax ;ecx:ebx = ebx+eax+cf =(a*2 + b/2 + e) / (c-d) + x/a
    87 00000071 11D1                        adc ecx, edx 
    88                                      
    89                                      
    90 00000073 6A00                        push   dword 0 ;saves on stack the parameter of the function exit
    91 00000075 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution ofthe program
