     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte; b - word; c - double word; d - qword; - Unsigned representation
     3                                  ; (a - b) + (c - b - d) + d
     4                                  ; ex: a = 4; b = 3; c = 90; d = 80 => (4-3) + (90-3-80) + 80=1+7+80=88
     5                                  
     6                                  bits 32 ;assembling for the 32 bits architecture
     7                                  ; the start label will be the entry point in the program
     8                                  global  start 
     9                                  
    10                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
    11                                  
    12                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
    13                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
    14                                  segment  data use32 class=data ; the data segment where the variables are declared 
    15 00000000 04                      	a  db 4
    16 00000001 0300                    	b  dw 3
    17 00000003 5A000000                    c  dd 90
    18 00000007 5000000000000000            d  dq 80
    19 0000000F <res 00000008>              r resq 1 ;reserve 1 quadword in memory to save the result
    20                                      
    21                                  segment  code use32 class=code ; code segment
    22                                  start: 
    23 00000000 A0[00000000]            	mov  AL, [a] ;AL = a
    24 00000005 B400                        mov  AH, 0 ;converting AL to AX/ byte to word
    25 00000007 662B05[01000000]            sub  AX, [b] ;AX = AX - b = a - b 
    26 0000000E 66BA0000                    mov  DX, 0 ;converting AX to DX:AX
    27 00000012 BA00000000                  mov  EDX, 0 ;converting EAX to EDX:EAX
    28                                      
    29 00000017 8B1D[03000000]              mov EBX, [c] ;EBX = c
    30 0000001D 2B1D[01000000]              sub EBX, [b] ;EBX = c - b
    31 00000023 B900000000                  mov ECX, 0 ;conversion from edx to ecx:ebx, ECX:EBX = c - b
    32 00000028 2B1D[07000000]              sub EBX, dword [d]
    33 0000002E 1B1D[0B000000]              sbb EBX, dword [d+4]; ECX:EBX = c - b - d
    34                                  
    35 00000034 F8                          clc ;clear carry flag
    36 00000035 01D8                        add EAX, EBX ;eax = eax + ebx
    37 00000037 11CA                        adc EDX, ECX ;edx = edx + ecx + cf
    38                                      
    39 00000039 F8                          clc ;clear carry flag
    40 0000003A 0305[07000000]          	add EAX, dword [d]
    41 00000040 1305[0B000000]              adc EAX, dword [d+4] ;edx:eax = (a - b) + (c - b - d) + d
    42                                      
    43 00000046 A3[0F000000]                mov dword [r+0], eax 
    44 0000004B 8915[13000000]          	mov dword [r+4], edx 
    45                                      
    46 00000051 6A00                    	push   dword 0 ;saves on stack the parameter of the function exit
    47 00000053 FF15[00000000]          	call   [exit] ; function exit is called in order to end the execution ofthe program
